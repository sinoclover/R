# 直接使用multinom进行多项logit回归分析
# 其实mlogit和multinom要求的数据格式一致，也类似于pylogit要求的格式。
# 而mlogit进行数据重塑前的数据反而较为复杂。
library(nnet)
library(splines)
# 1.1利用multinom进行基于相应的数据格式进行多项logit回归
# 导入常规数据集
rawdata <- read.csv('F://Coding/R/MNL/data/demoR.csv')
print(rawdata)
fit <- multinom(choice ~ l + a + b, data = rawdata)
print(fit)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
print(data_color)
print(ns)
print(ns)
coef(ns)
summary(ns)
library(nnet)
library(splines)
ns <- ns(0.5, df=4)
print(ns)
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
l = data_color$l
print(l)
ns <- ns(l, df=4)-ns(0.5, df=4)
ns <- (ns(l, df=4)-ns(0.5, df=4))
print(l)
ns <- (ns(l, df=4)-ns(0.5, df=4))
print(ns)
ns <- ns(l, df=4)
ns2 <- ns(0.5, df=4))
ns2 <- ns(0.5, df=4)
print(ns)
print(ns2)
ns3 <- (ns - ns2)
ns3 <- ns - ns2
print(ns3)
ns2 <- ns(0.65, df=4)
print(ns)
print(ns2)
print(ns(0.5))
print(ns1(0.5))
ns1 <- ns(l, df=4)
ns2 <- ns(0.63, df=4)
print(ns1)
print(ns2)
print(ns1(0.5))
print(ns1$0.5)
print(ns1)
print(ns1$basis)
print(ns1.basis)
print(ns1.matrix)
print(ns1$matrix)
print(ns1$class)
print(ns1.class)
class(ns1)
basis(ns1)
ns2 <- ns(0.63, df=4)
print(ns2)
ns2 <- predict(ns1, 0.63)
basis(ns1)
print(ns2)
x <- lm(ln2 ~ (ns1-ns2), data=data_color)
print(ns1)
print(ns3)
ns3 <- ns1 - ns2[1]
print(ns3)
ns2 <- predict(ns1, 0.63)[1]
print(ns1)
print(ns2)
ns2 <- predict(ns1, 0.63)
ns2 <- predict(ns1, 0.63)
print(ns1)
print(ns2)
ns3 <- ns1 - ns2[1,]
print(ns3)
ns2 <- predict(ns1, 0.63)[1,]
print(ns1)
print(ns2)
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.63)
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.4252)
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, 0.315)
ns <- lm(ln2 ~ (ns1-ns11[1,])+(ns2-ns22[1,])+(ns3-ns33[1,]))
ns <- lm(ln2 ~ (ns1-ns11[1,])+(ns2-ns22[1,])+(ns3-ns33[1,]), data=data_color)
ns <- lm(ln2 ~ (ns1-ns11[1,])+(ns2-ns22[1,])+(ns3-ns33[1,]), data=data_color)
ns <- lm(ln2 ~ (ns(l,df=4)-ns11[1,])+(ns(a,df=4)-ns22[1,])+(ns(b,df=4)-ns33[1,]), data=data_color)
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.63)
ns111 <- ns1-ns11
ns111 <- ns1-ns11[1,]
print(ns111)
ns <- lm(ln2 ~ ns111+ns222+ns333, data=data_color)
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.63)
ns111 <- ns1-ns11[1,]
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.4252)
ns222 <- ns2-ns22[1,]
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, 0.315)
ns333 <- ns3-ns33[1,]
ns <- lm(ln2 ~ ns111+ns222+ns333, data=data_color)
print(ns)
summary(ns)
library(nnet)
library(splines)
require(stats)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
library(nnet)
library(splines)
require(stats)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
# 构建变量
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.63)
nsDL <- ns1-ns11[1,]
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.4252)
nsDA <- ns2-ns22[1,]
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, 0.315)
nsDB <- ns3-ns33[1,]
# 进行线性回归并引入自然三次样条
ns <- lm(ln2 ~ nsDL+nsDA+nsDB, data=data_color)
print(ns)
coef(ns)
summary(ns)
summary(ns)
# 数据节点内的全色彩空间数据构造
newdata <- expand.grid(l = seq(min(data_color$l), max(data_color$l), 0.1),
a = seq(min(data_color$a), max(data_color$a), 0.1),
b = seq(min(data_color$b), max(data_color$b), 0.1))
print(newdata)
summary(ns)
# 数据节点内的全色彩空间数据构造
newdata <- expand.grid(l = seq(min(data_color$l), max(data_color$l), 0.05),
a = seq(min(data_color$a), max(data_color$a), 0.1),
b = seq(min(data_color$b), max(data_color$b), 0.1))
print(newdata)
class(newdata)
# 根据获得的系数进行色彩效用推广
# 记录各个样条基函数并计算各效用值
L <- ns(newdata$l, df=4)
L <- data.frame(L)
print(L)
ul = coef(ns)[2] * L$X1 + coef(ns)[3] * L$X2 + coef(ns)[4] * L$X3 + coef(ns)[5] * L$X4
A <- ns(newdata$a, df=4)
A <- data.frame(A)
print(A)
ua = coef(ns)[6] * A$X1 + coef(ns)[7] * A$X2 + coef(ns)[8] * A$X3 + coef(ns)[9] * A$X4
B <- ns(newdata$b, df=4)
B <- data.frame(B)
print(B)
ub = coef(ns)[10] * B$X1 + coef(ns)[11] * B$X2 + coef(ns)[12] * B$X3 + coef(ns)[13] * B$X4
u = ul+ua+ub
print(u)
newdata$u <- u
print(newdata)
write.csv(newdata, file = 'F://Coding/R/MNL/data_color_analysis.csv', row.names = FALSE)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
library(nnet)
library(splines)
require(stats)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
# 构建变量
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.63)
nsDL <- ns1-ns11[1,]
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.4252)
nsDA <- ns2-ns22[1,]
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, 0.315)
nsDB <- ns3-ns33[1,]
# 进行线性回归并引入自然三次样条
ns <- lm(ln2 ~ nsDL+nsDA+nsDB, data=data_color)
print(ns)
coef(ns)
summary(ns)
# 数据节点内的全色彩空间数据构造
newdata <- expand.grid(l = seq(min(data_color$l), max(data_color$l), 0.1),
a = seq(min(data_color$a), max(data_color$a), 0.1),
b = seq(min(data_color$b), max(data_color$b), 0.1))
print(newdata)
class(newdata)
# 根据获得的系数进行色彩效用推广
# 记录各个样条基函数并计算各效用值
L <- ns(newdata$l, df=4)
L <- data.frame(L)
print(L)
ul = coef(ns)[2] * L$X1 + coef(ns)[3] * L$X2 + coef(ns)[4] * L$X3 + coef(ns)[5] * L$X4
A <- ns(newdata$a, df=4)
A <- data.frame(A)
print(A)
ua = coef(ns)[6] * A$X1 + coef(ns)[7] * A$X2 + coef(ns)[8] * A$X3 + coef(ns)[9] * A$X4
B <- ns(newdata$b, df=4)
B <- data.frame(B)
print(B)
ub = coef(ns)[10] * B$X1 + coef(ns)[11] * B$X2 + coef(ns)[12] * B$X3 + coef(ns)[13] * B$X4
u = ul+ua+ub
print(u)
newdata$u <- u
print(newdata)
write.csv(newdata, file = 'F://Coding/R/MNL/data_color_analysis.csv', row.names = FALSE)
library(nnet)
library(splines)
require(stats)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
# 构建变量
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.31)
nsDL <- ns1-ns11[1,]
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.0157)
nsDA <- ns2-ns22[1,]
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, -0.2677)
nsDB <- ns3-ns33[1,]
# 进行线性回归并引入自然三次样条
ns <- lm(ln2 ~ nsDL+nsDA+nsDB, data=data_color)
print(ns)
coef(ns)
summary(ns)
# 数据节点内的全色彩空间数据构造
newdata <- expand.grid(l = seq(min(data_color$l), max(data_color$l), 0.1),
a = seq(min(data_color$a), max(data_color$a), 0.1),
b = seq(min(data_color$b), max(data_color$b), 0.1))
print(newdata)
summary(ns)
# 数据节点内的全色彩空间数据构造
newdata <- expand.grid(l = seq(min(data_color$l), max(data_color$l), 0.1),
a = seq(min(data_color$a), max(data_color$a), 0.1),
b = seq(min(data_color$b), max(data_color$b), 0.1))
print(newdata)
class(newdata)
# 根据获得的系数进行色彩效用推广
# 记录各个样条基函数并计算各效用值
L <- ns(newdata$l, df=4)
L <- data.frame(L)
print(L)
ul = coef(ns)[2] * L$X1 + coef(ns)[3] * L$X2 + coef(ns)[4] * L$X3 + coef(ns)[5] * L$X4
A <- ns(newdata$a, df=4)
A <- data.frame(A)
print(A)
ua = coef(ns)[6] * A$X1 + coef(ns)[7] * A$X2 + coef(ns)[8] * A$X3 + coef(ns)[9] * A$X4
B <- ns(newdata$b, df=4)
B <- data.frame(B)
print(B)
ub = coef(ns)[10] * B$X1 + coef(ns)[11] * B$X2 + coef(ns)[12] * B$X3 + coef(ns)[13] * B$X4
u = ul+ua+ub
print(u)
newdata$u <- u
print(newdata)
write.csv(newdata, file = 'F://Coding/R/MNL/data_color_pridect.csv', row.names = FALSE)
library(nnet)
library(splines)
require(stats)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
# 构建变量
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.63)
nsDL <- ns1-ns11[1,]
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.4252)
nsDA <- ns2-ns22[1,]
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, 0.315)
nsDB <- ns3-ns33[1,]
# 进行线性回归并引入自然三次样条
ns <- lm(ln2 ~ nsDL+nsDA+nsDB, data=data_color)
print(ns)
coef(ns)
summary(ns)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
library(nnet)
library(splines)
require(stats)
# 写入自变量及因变量
data_color <- read.csv('F://Coding/R/MNL/p_color.csv')
print(data_color)
# 构建变量
ns1 <- ns(data_color$l, df=4)
ns11 <- predict(ns1, 0.31)
nsDL <- ns1-ns11[1,]
ns2 <- ns(data_color$a, df=4)
ns22 <- predict(ns2,-0.0157)
nsDA <- ns2-ns22[1,]
ns3 <- ns(data_color$b, df=4)
ns33 <- predict(ns3, -0.2677)
nsDB <- ns3-ns33[1,]
# 进行线性回归并引入自然三次样条
ns <- lm(ln2 ~ nsDL+nsDA+nsDB, data=data_color)
print(ns)
coef(ns)
summary(ns)
View(ns111)
library(nnet)
library(splines)
rawdata <- read.csv('F://Coding/R/MNL/data/demoR.csv')
print(rawdata)
ns1 <- multinom(choice ~ ns(l-78, df=4)+ns(a-2, df=4)+ns(b-73, df=4), data = rawdata)
print(ns1)
summary(ns1)
ns2 <- multinom(choice ~ ns(l, df=4, intercept=TRUE)+ns(a, df=4, intercept=TRUE)+ns(b, df=4, intercept=TRUE), data = rawdata)
print(ns2)
data <- read.csv('F://Coding/R/MNL/data/demolm2.csv')
print(data)
library(mlogit)
library(nnet)
library(splines)
data("HC", package = "mlogit")
print(HC)
# 导入数据集
rawdata <- read.csv('F://Coding/R/MNL/data/demoR2.csv')
print(rawdata)
# 数据集转换
mydata <- mlogit.data(rawdata, shape='wide', choice='choice', varying = 2:16)
print(mydata)
